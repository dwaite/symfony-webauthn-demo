security:
    #enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        default:
            id: App\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            webauthn:
                failure_handler: 'App\Security\AuthenticationFailureHandler'
                success_handler: 'App\Security\AuthenticationSuccessHandler'
                registration:
                    enabled: true
                    profile: default
                    routes:
                        options_path: '/api/register/options'
                        result_path: '/api/register'
                authentication:
                    enabled: true
                    profile: default
                    routes:
                        options_path: '/api/login/options'
                        result_path: '/api/login'
            logout:
                path: '/api/logout'
                success_handler: 'App\Security\LogoutSuccessHandler'
        #main:
        #    lazy: true
        #    provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/attestation,  roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: 'https' }
        - { path: ^/assertion,  roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: 'https' }
        - { path: ^/api/logout,  roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: 'https' }
        - { path: ^/api/login,  roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: 'https' }
        - { path: ^/api/register,  roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: 'https' }
        - { path: ^/api/profile, roles: ROLE_USER, requires_channel: 'https' }
        - { path: ^/,       roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: 'https' }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
